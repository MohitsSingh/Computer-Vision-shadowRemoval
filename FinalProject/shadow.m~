function shadow


im = imread('images/DSC_0400.jpg');
im_mask = imread('images/DSC_0400.png');
im = im2double(im);
meanval = 0;
for layer=1:3

    I = im(:,:,layer);
    meanval(1, layer) = mean(I(:));
    Illum = log(I+1);

    
    boundary = traceBoundary(im_mask);
    size = length(boundary);
      
    t0 = struct('x', {}, 'y', {});
    for i = 1:size
        t0(i).x = boundary(i, 2);
        t0(i).y = boundary(i, 1);
    end
        
    radius = 16;
    [gradX, gradY] = imgradientxy(Illum_log, 'Sobel');
    [m_lx,m_ly]=getIlluminationModel(boundary,Illum,gradX,gradY,radius);

    numPoints = size;
    im = I;
    imMask = im_mask;

    logIm = Illum;
    %fitX
    optX = m_lx;
    optY = m_ly;
    lineWidth = radius/2;
    %-----------------------------------------------------------------------
    % create H, f, A, b for optimum X models and solve the minimization equation
    lambda = 10;
    gamma = 0.9;
    H = createH(lambda, gamma, numPoints);
    f = createF(gamma, optX);
    A = createA(numPoints);
    b = createBx(t0, size(im,2), lineWidth);
    options = optimoptions('quadprog',...
    'Algorithm','trust-region-reflective','Display','off');

    %solve for the quadratic minimization problem for X
    outX = quadprog(H,f,A,b,[],[],[],[],[],options);
    outXc = outX(1:numPoints); 
    outXt1 = outX(numPoints + 1 : 2 * numPoints);
    outXt2 = outX(2 * numPoints + 1 : length(outX));
    solvedModelsX = optX;
    for i = 1 : length(optX)
    finalC = outXc(i);
    finalt1x = outXt1(i);
    finalt2x = outXt2(i);

    solvedModelsX(i).c = finalC;

    temp = t0(i);
    temp.x = finalt1x;
    solvedModelsX(i).t1 = temp;

    %since y is same on the horizontal line
    temp.x = finalt2.x;
    solvedModelsX(i).t2 = temp;    
    end
    %--------------------------------------------------------------------------
    %--------------------------------------------------------------------------
    % create H, f, A, b for optimum Y models and solve the minimization equation
    lambda = 10;
    gamma = 0.9;
    H = createH(lambda, gamma, numPoints);
    f = createF(gamma, optY);
    A = createA(numPoints);
    b = createBy(t0, size(im,1), lineWidth);
    options = optimoptions('quadprog',...
    'Algorithm','trust-region-reflective','Display','off');

    %solve for the quadratic minimization problem for Y
    outY = quadprog(H,f,A,b,[],[],[],[],[],options);
    outYc = outY(1:numPoints); 
    outYt1 = outY(numPoints + 1 : 2 * numPoints);
    outYt2 = outY(2 * numPoints + 1 : length(outY));
    solvedModelsY = optY;
    for i = 1 : length(optY)
    finalC = outYc(i);
    finalt1y = outYt1(i);
    finalt2y = outYt2(i);

    solvedModelsY(i).c = finalC;

    temp = t0(i);
    temp.y = finalt1y;
    solvedModelsY(i).t1 = temp;

    %since x is same on the vertical line
    temp.y = finalt2.y;
    solvedModelsY(i).t2 = temp;    
    end
    %--------------------------------------------------------------------------

    %--------------------------------------------------------------------------
    %Compute Cancelled shadow gradients with the final solved models
    [cancelGradX, cancelGradY] = cancelShadow(solvedModeX, solvedModeY, gradX,...
                                    gradY,logIm);
    %--------------------------------------------------------------------------


    %--------------------------------------------------------------------------
    %Compute Cancelled shadow gradients with the final solved models
    finalMask = computeFinalMask(imMask, solvedModelsX, solvedModelsY, t0, lineWidth);
    %--------------------------------------------------------------------------

    %--------------------------------------------------------------------------
    %Compute Texture consistent gradients with the cancelled gradients
    texGradX = calcTexConsistentGrad(cancelGradX, finalMask, t0, lineWidth, 1);
    texGradY = calcTexConsistentGrad(cancelGradY, finalMask, t0, lineWidth, 0);
    %--------------------------------------------------------------------------


    % OGx(:,end) = 0;
    % OGy(end,:) = 0;
    finalCancelledGradX(:,:,layer) = cancelGradX;
    finalCancelledGradY(:,:,layer) = cancelGradY;

    % gtcX(:,end) = 0;
    % gtcY(end,:) = 0;
    finaltexGradX(:,:,layer) = texGradX;
    finaltexGradY(:,:,layer) = texGradY;
end




end


